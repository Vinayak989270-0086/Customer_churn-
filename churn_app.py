# -*- coding: utf-8 -*-
"""Untitled29.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vrsTJG67BtqNPAPh9X74KasODFyRZA_C
"""

import streamlit as st
import pandas as pd
import numpy as np
import joblib

# Load model and scaler
model = joblib.load("xgb_churn_model.pkl")
scaler = joblib.load("scaler.pkl")

# Define full feature list (no 'Churn')
feature_names = [
    'SeniorCitizen', 'tenure', 'MonthlyCharges', 'TotalCharges',
    'gender_Male', 'Partner_Yes', 'Dependents_Yes', 'PhoneService_Yes',
    'MultipleLines_No phone service', 'MultipleLines_Yes',
    'InternetService_Fiber optic', 'InternetService_No',
    'OnlineSecurity_No internet service', 'OnlineSecurity_Yes',
    'OnlineBackup_No internet service', 'OnlineBackup_Yes',
    'DeviceProtection_No internet service', 'DeviceProtection_Yes',
    'TechSupport_No internet service', 'TechSupport_Yes',
    'StreamingTV_No internet service', 'StreamingTV_Yes',
    'StreamingMovies_No internet service', 'StreamingMovies_Yes',
    'Contract_One year', 'Contract_Two year', 'PaperlessBilling_Yes',
    'PaymentMethod_Credit card (automatic)', 'PaymentMethod_Electronic check',
    'PaymentMethod_Mailed check'
]

# Streamlit UI
st.title("üìâ Customer Churn Prediction")

# Basic inputs
gender = st.selectbox("Gender", ["Female", "Male"])
senior = st.selectbox("Senior Citizen", [0, 1])
tenure = st.slider("Tenure (months)", 0, 72, 12)
monthly = st.slider("Monthly Charges", 0.0, 150.0, 70.0)
total = st.number_input("Total Charges", value=1000.0)
internet = st.selectbox("Internet Service", ["DSL", "Fiber optic", "No"])
contract = st.selectbox("Contract", ["Month-to-month", "One year", "Two year"])
payment = st.selectbox("Payment Method", [
    "Bank transfer", "Credit card (automatic)",
    "Electronic check", "Mailed check"
])
paperless = st.selectbox("Paperless Billing", ["No", "Yes"])

# Build input dictionary
input_data = dict.fromkeys(feature_names, 0)
input_data['SeniorCitizen'] = senior
input_data['tenure'] = tenure
input_data['MonthlyCharges'] = monthly
input_data['TotalCharges'] = total

# Map categorical fields
if gender == "Male":
    input_data['gender_Male'] = 1
if paperless == "Yes":
    input_data['PaperlessBilling_Yes'] = 1
if contract == "One year":
    input_data['Contract_One year'] = 1
elif contract == "Two year":
    input_data['Contract_Two year'] = 1
if internet == "Fiber optic":
    input_data['InternetService_Fiber optic'] = 1
elif internet == "No":
    input_data['InternetService_No'] = 1
if payment == "Credit card (automatic)":
    input_data['PaymentMethod_Credit card (automatic)'] = 1
elif payment == "Electronic check":
    input_data['PaymentMethod_Electronic check'] = 1
elif payment == "Mailed check":
    input_data['PaymentMethod_Mailed check'] = 1

# Make prediction
if st.button("Predict"):
    input_df = pd.DataFrame([input_data])

    # No scaling needed for XGBoost since it was trained on unscaled data
    prediction = model.predict(input_df)[0]
    probability = model.predict_proba(input_df)[0][1]

    if prediction == 1:
        st.error(f"‚ö†Ô∏è This customer is likely to churn (probability: {probability:.2f})")
    else:
        st.success(f"‚úÖ This customer is not likely to churn (probability: {probability:.2f})")

